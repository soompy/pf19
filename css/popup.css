.gal img{
    height: 200px;
    display: block;
    margin-bottom: 20px;
    background: #ccc;
}





/*sass 함수와 변수*/
1. data type

$foundation-palette:(
    primary: #ccc,
    mars: #ddd,
    saturn: #sss,
    neptune: #aaa
);

.mars{
    color: map-get($foundation-palette, mars);
}
/*json과 유사한 방식으로 map-get 함수를 사용하여 원하는 값을 추출할 수 있다.*/


2. 변수 - 문자열, 숫자, 컬러 등을 사전에 변수에 저장하고 필요할 때 불러 사용할 수 있다.
         변수명은 $로 시작한다.
$site_max_width: 960px;
$font_color: #444;
$link_color: #ccc;
$font_family: arial, sans-serif;
$font_size: 16px;
$line_height: percentage(20px/ $font_size);

body{
    color: $font_color;
    font: {
        size: $font_size;
        family: $font_family;
    }
    line-height: $line_height;
}

#main{
    width: 100%;
    max-width: $site_max_width;
}


3. 변수의 scope - 변수에는 유효범위가 존재한다.
$width는 전역변수가 된다. 전역변수는 전역은 물론 하위의 어떤 코드 블록 내에서도 유효하다.
코드블록 내에서 선언된 변수는 지역변수가 된다.
지역변수의 유효범위는 자신이 속한 코드 블록과 하위 코드 블록이다.

$width: 960px;    //global variable

header{
    width: $width;
    margin: 0 auto;
}

#main{
    $color: #333;    //local variable
    width: $width;
    margin: 20px auto;
    section{
        p{
            color: $color;
            a:link{
                color: $color;
            }
        }
    }
}

footer{
    width: $width;
    margin: 0 auto;
    color: $color;
}



코드 블록 내에서 선언한 지역변수를 전역변수화하는 방법
#main{
    $color: #333 !global;    // global variable
    width: $width;
}



1 숫자연산자
== 동등
!= 부등

상대적인 값을 갖는 단위의 연산은 동일한 단위를 갖는 값과의 연산만이 유효함.

calc()     계산을 해주는 속성
사칙 연산시 + 또는 -는 반드시 기호 양쪽으로 공백을 삽입해야함.
ex) calc(100%/6 - 30px) 유효
    calc(100%/6-30px)    유효하지 않음

ex) 
#foo{
    width: calc(25% - 5px);
}

p{
    font: italic bold 12px/30px georgia, serif;
}
css에서의 /는 나눗셈의 의미가 아니라 값을 분리하는 의미를 갖는다.
> sass에서 / 연산자를 사용하기 위해서는 몇가지 조건이 필요하다.
변수에 대해 사용, 괄호 내에서 사용, 다른 연산의 일부로서 사용

변수를 css의 /와 함께 사용하고자 하는 경우 #{} (interpolation)를 사용한다.

p{
    $font-size: 12px;
    $line-height: 30px;
    font: #{$font-size}/#{$line-height};    // 12px/30px
}


2 컬러 연산자
3 문자열 연산자
    + 연산자는 자바스크립트와 같이 문자열을 연결할 수 있다.
p{
    cursor: e + -resize;    // e-resize
}

따옴표가 있는 문자열과 없는 문자열을 함께 사용하는 경우, 좌항의 문자열을 기준으로 따옴표를 처리한다.
p:before{
    content: "fpp" + bar;    // foo bar
    font-family: snas- + "serif"    // sans-serif
}

Operator	Description
&&	and
||	or
!	not



interpolation: #{}
변수의 값을 문자열 그대로 삽입한다. 인터폴레이션에 의해 삽입된 문자열은 연산의 대상으로 취급되지 않는다.
변수는 프로퍼티갑으로만 사용할 수 있으나 #{}을 사용하면 프로퍼티값은 물론 셀력터와 프로퍼티명에도 사용할 수 있다.

$name: foo;
$attr: border;

p.#{$name}{    // p.foo
    #{$attr}-color: blue;    // border-color: blue;
}

.someclass{
    $font-size: 12px;
    $line-height: 30px;
    // 연산의 대상으로 취급되지 않도록
    font: #{$font-size} / #{$line-height};    // 12px / 30px
}

ampersand(&)

!default는 할당되지 않은 변수의 초기값을 설정한다.
$content: null;
$content: "mon-null content" !default;
#main{
    content: $content;    // "non-null content"
}
body{
    font: #{$font-size}/$line-height $font-family;
}

@import "font";









nesting, import, extend, 조건과 반복, mixin, function

1. nesting
sass의 유용한 확장 기능으로 선언을 중첩하는 것이다.
css는 후손 셀렉터의 경우 부모요소를 기술해야 한다.
단, 너무 깊은 nesting은 가독성을 나쁘게 하고 셀렉터를 복잡하게 만든다.

nesting은 프로퍼티에도 사용할 수 있다.
.funcky{
    font:{
        family: fantasy;
        size: 30em;
        weight: bold;
    }
}

@import
partial된 sass파일명 선두에 붙인 _의 의미는 import는 수행하되 css로의 컴파일은 수행하지 말라는 의미를 갖는다.
따라서 partial은 import시에는 css파일로 컴파일되지 않기 때문에 최종적으로 css로 컴파일을 수행할 sass파일에서 import한다.
    
@import "partial/vars";
@import "partial/header";
@import "partial/sidebar";
@import "partial/footer";

_vars.scss에는 변수가 선언되어 있으므로 partial된 
_vars.scss
_header.scss
_sidebar.scss
_footer.scss를 import가 수행되어 하나의 파일이 되기 이전에 컴파일을 실행하면 에러가 발생한다.
즉, partial된 sass파일명 선두에 붙인 _을 제거하면 에러가 발생한다.
따라서 partial된 sass 파일명 선두에는 반드시 _를 붙여서 import 시에는 partial이 css 파일로 컴파일되지 않고 import가 완료된 이후, css로 컴파일을 수행하도록 한다.


.example{
    color: red;
}
#main{
    @import "example";
}
위 두 코드를 컴파일하면 결과는
#main .example{
    color: red;
}




@extend
기존 스타일을 상속하고자 하는 경우 사

.error{
    border: 1px #f00;
    background-color: blue;
}
.seriousError{
    @extend .error;
    border-width: 3px;
    border-color: darkblue;
}
위 코드의 컴파일 결과는 
.error, .seriousError{
    border: 1px #f00;
    background-color: blue;
}
.seriousError{
    border-width: 3px;
    border-color: darkblue;
}
> 이제 하나의 클래스만 적용하면 된다. .seriusError


@extend를 @media 블록과 같이 사용하는 경우, 제대로 작동하지 않는다.
@media 안에서 외부으 ㅣ선택자를 @extend 할 수 없다.

.foo{
    color: red;
}
@media print{
    .bar{
        //error
        @extend .foo;
    }
}






placeholder selector
재이용이 가능한 rule set을 % 키워드로 지정하는 @extend 전용 selector이다.
얘는 상속만을 위한 rule set으로 자신은 컴파일 되지 않는다.

%input-style {
  font-size: 14px;
}

.input-black {
  @extend %input-style;

  color: black;
}

.input-red {
  @extend %input-style;

  color: red;
}




if()
주어진 조건을 판단하여 결과를 리턴한다.
javascript의 삼항연산자와 유사하게 동작한다.

if(condition, if_true, if_false)
조건, 참, 거짓 순
condition이 true이면 if_truefmf, false이면 if_false를 반환한다.

$type: ocean;
p{
    color: if($type == ocean, blue, black);    // color: blue;
}








@if
    조건 분기가 가능함
    
$type: monster;
p{
    @if $type == ocean{
        color: blue;
    }@else if $type == matador {
        color: red;
    }@else if $type == monster{
        color: green;
    }@else{
        color: black;
    }
}
컴파일 > p{color: green}






@for
    
    @for $i from 1 through 3{
        .item-#{$i}{
            width: 2em * $i;
        }
    }






@each
    
@each와 list 또는 map의 요소에 대해 반복을 실시한다.

@each $animal in puma, sea-slug, egret, salamander{
    .#{$animal}-icon{
        background-image: url("/images/#{$animal}.png");
    }        
}

@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
  #{$header} {
    font-size: $size;
  }
}






@while
    
$i: 6;
@while $i > 0{
    .item-#{$i}{ width: 2em * $i; }
    $i: $i - 2;
}

.item-6 {
  width: 12em;
}

.item-4 {
  width: 8em;
}

.item-2 {
  width: 4em;
}






@mixin은 중복기술을 방지하기 위해 사용빈도가 높은 마크업을 사전에 정의, 
필요할때 @include로 불러옴
    
@mixin circle {
  width: 50px;
  height: 50px;
  border-radius: 50%;
}

// 지름이 50px인 원을 위한 mixin을 include한 후, 배경을 추가 지정
.box {
  @include circle;
  background: #f00;
}
   

@mixin circle($size){
    width: $size;
    height: $size;
    border-radius: 50%;
}
.box{
    @include circle(100px);
    background: #f00;
}
    
argument의 초기값을 설정할 수도 있음
@mixin circle($size: 10px){
    width: $size;
    height: $size;
    border-radius: 50%;
}    
.box{
    @include circle();
    background: #f00;
}
    
    
    
    
    

@mixin vendorPreffix($property, $value){
    @each $prefix in -webkit-, -moz-, -ms-, -o-, ''{
        #{$prefix}#{$property}: $value;
    }
}
.border_radius{
    @include vendorPrefix(transition, 0.5s);
}




@mixin opacity($opacity){
    opacity: $opacity;
    $opacityIE: $opacity * 100;
    filter: alpha(opacity=$opacityIE); /* For IE5~IE9 */ 
}
.box{
    @include opacity(0.5);
}
    




@mixin position($position, $top: null, $right: null, $bottom:null, $left: null){
    position: $position;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}
.box{
    @include position(absolute, $top: 10px, $left: 50%);
}
컴파일
.box{
    position: absolute;
    top: 10px;
    left: 50%;
}


mixin과 function은 유사하나 리턴값에 차이가 있다.
mixin: style markup을 리턴
function: @return directive를 통해 값을 리턴
    
$grid-width: 40px;
$gutter-width: 10px;

@function grid-width($n){
    @return $n * $grid-width + ($n - 1) * $gutter-width;
}

#sidebar{
    width: grid-width(5);    // width: 240px;
}







따옴표 붙이기
quote("foo") => "foo"
quote(foo) => "foo"

따옴표 제거
unquote("foo") => foo
unquote(foo) => foo

리스트 요소수 취득
length(10px)                        => 1
length(10px 20px 30px)              => 3
length((width: 10px, height: 20px)) => 2

리스트의 n번째 요소 취득
nth(10px 20px 30px, 1)                 => 10px
nth((Helvetica, Arial, sans-serif), 3) => sans-serif
nth((width: 10px, length: 20px), 2)    => length 20px

$n: nth(width: 10px, length: 20px);
nth(($n, 2), 1)                        => length








<div class="pf_info_box area_common">
    <ul class="row">
      <li class="col-sm-4">
        <img src="/img/pf/icon-bulb.svg" alt="태양광+ESS">
        <div class="pf_feature">
          <h2>태양광+ESS</h2>
          <span>리파이낸싱으로 운영중인<br>발전소의 수익 극대화</span>
        </div>
      </li>
      <li class="col-sm-4">
        <img src="/img/pf/icon-module.svg" alt="모듈 인버터 여신">
        <div class="pf_feature">
          <h2>모듈 · 인버터 여신</h2>
          <span>제조사, 설비용량,<br>구매실적에 관계없이</span>
        </div>
      </li>
      <li class="col-sm-4">
        <img src="/img/pf/icon-doc-n-coin.svg" alt="토지 건설 자금 대출">
        <div class="pf_feature">
          <h2>토지 · 건설 자금 대출</h2>
          <span>사업수익과 직결되는<br>맞춤 금융 솔루션</span>
        </div>
      </li>
    </ul>
    <div class="btn_area_footer">
      <a href="/pf-consult" class="btn_custom btn-pf btn-border">태양광 금융 시작하기</a>
    </div>
  </div>



